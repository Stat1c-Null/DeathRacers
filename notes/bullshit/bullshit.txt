
/// Draw player gui
//VHS PLAY
draw_set_color(c_ltgray)
draw_set_font(f_vhs)
draw_text(60, 100, "PLAY >")
draw_text(60, 1230, "SP")

//Gas Gas Gas i am gonna step on the gas tonight we'll fly
draw_sprite_ext(GasUI, 1, 146, 200, max(0, global.gasAmount/global.maxAmount), 1, 0, c_white, 1)
draw_sprite(UIBack, 1, 100, 200)

//Condition
draw_sprite_ext(s_condition_front, 1, 2286, 200, max(0, global.health/global.maxHealth), 1, 0, c_white, 1)
draw_sprite(s_condition_back, 1, 2240, 200)

//Speeeeeed
draw_text(100, 500, "Speed: " + string(phy_speed))
draw_text(100, 550, "MPH: " + string(round(global.mphSpeed)))
//Score
//draw_set_font(f_debug)
draw_set_color(c_yellow)
draw_text(1217, 100, "SCORE")
draw_text(1215, 105, "_____")
draw_set_color(c_orange)
draw_text(obj_car.score_y_pos, 180, string(round(obj_car.player_score)))
draw_sprite(s_dollar_bill_ui, 1, 100, 425)
if(global.not_enough_money){
	global.not_enough_money = false
	draw_set_color(c_red)
	alarm[2] = room_speed * obj_car.money_timer
} else {
	draw_set_color(c_lime)
}
draw_text(200, 400, "$" + string(global.dollars))
//Draw Time Clock
draw_set_color(c_ltgray)
draw_text(2240, 1200, string(global.army_time))
draw_text(2150, 1260, "MAR.0" + string(global.day) + ".2007")

------------------------------------------------------------------------------------------------------------


/// @description OLD TV Filter Settings
//  Use this file to create presets for OLD TV Filter.
//
//  Version 1.0
//  
//  Developed by Vortex Game Studios LTDA ME. (http://vortexstudios.com
//  Author: Alexandre Ribeiro de Sá (@alexribeirodesa)
//

script_execute( scr_OLDTVFilter_Settings );

global.oldtvfilter_enabled = true;
global.keep_aspect_ratio = true;

//  Game Settings
//  this is based in your game resolution, 
//  not the game window resolution.
//  ex.: NES uses 224 lines
global.game_lines = 224;

//  Noise
global.noise_enabled = true;
global.noise_pattern = sprite_get_texture(sprNoise1,0);
global.noise_magnetude = -0.2;              // -1.0 ~ 1.0
global.static_pattern = sprite_get_texture(sprStatic1,0);
global.static_magnetude = 0.1;              // 0.0 ~ 1.0
global.static_offset = 0.0;                 // -1.0 ~ 1.0
global.dirt_pattern = sprite_get_texture(sprNoise1,0);
global.dirt_magnetude = 0.35;				// 0.0 ~ 1.0
global.dirt_offset = 0.0;                   // -1.0 ~ 1.0

//  Composite Settings
global.composite_enabled = true;
global.composite_secondpass_enabled = false;
global.composite_distortion = 0.25;         //  0.0 ~ 1.0
global.composite_artifact = 0.07;           //  0.0 ~ 1.0
global.composite_fringing = 0.4;            //  0.0 ~ 1.0
global.composite_bleeding = 1.0;            //  0.0 ~ 1.0

//  Television Settings
global.television_enabled = true;
global.television_brightness = 0.0;         // -1.0 ~ 1.0
global.television_contrast = 0.05;          // -1.0 ~ 1.0
global.television_saturation = 0.85;        //  0.0 ~ 1.0
global.television_sharpness = -1.0;         // -1.0 ~ 1.0

//  Chromatic Aberration
global.chromatic_enabled = true;
global.chromatic_pattern = sprite_get_texture(sprChromatic1,0);
global.chromatic_magnetude = 0.1;

//  Scanline Settings
global.scanline_enabled = true;
global.scanline_count = 224;
global.scanline_pattern = sprite_get_texture(sprScanline1,0);        
global.scanline_magnetude = 0.5;            //  0.0 ~ 1.0

//  Tube Settings
global.tube_enabled = true;
global.tube_mask = sprite_get_texture(sprMaskWide1,0);
global.tube_distortion = 0.3;              // -1.0 ~ 1.0

script_execute( scr_OLDTVFilter_Setup );
--------------------------------------------------------------------------------------------------

function scr_OLDTVFilter_Setup() {
	//
	//  OLD TV Filter for GameMaker Studio 2
	//
	//  Version 1.0
	//  
	//  Developed by Vortex Game Studios LTDA ME. (http://vortexstudios.com)
	//  Author: Alexandre Ribeiro de Sá (@alexribeirodesa)
	//

	//  ATTENTION!
	//  DO NOT EDIT THIS FILE, USE THE PRESET OBJECT

	//  Vídeo Buffer
	application_surface_draw_enable(false);

	//  the real game resolution
	global._oldtv_timer = 0.0;
	global.surface_width  = window_get_width();
	global.surface_height = window_get_height();

	global.bufferLastFrame = surface_create( global.surface_width, global.surface_height );
	global.bufferSurface[0] = surface_create( global.surface_width, global.surface_height );
	global.bufferSurface[1] = surface_create( global.surface_width, global.surface_height );

	//  Last frame shadow
	//global._ghost_width = shader_get_uniform(sh_OLDTVFilter_Ghost, "f_screenWidth");
	//global._ghost_height = shader_get_uniform(sh_OLDTVFilter_Ghost, "f_screenHeight");
	//global._ghost_lastframe = shader_get_sampler_index(sh_OLDTVFilter_Ghost, "t_texLastframe")

	//  Noise
	global._noise_pattern = shader_get_sampler_index(sh_OLDTVFilter_Noise, "t_texNoise");
	global._noise_magnetude = shader_get_uniform(sh_OLDTVFilter_Noise, "f_magnetudeNoise");
	global._noise_offset = shader_get_uniform(sh_OLDTVFilter_Noise, "f_offsetNoise");
	global._static_pattern = shader_get_sampler_index(sh_OLDTVFilter_Noise, "t_texStatic");
	global._static_magnetude = shader_get_uniform(sh_OLDTVFilter_Noise, "f_magnetudeStatic");
	global._static_offset = shader_get_uniform(sh_OLDTVFilter_Noise, "f_offsetStatic");
	global._dirt_pattern = shader_get_sampler_index(sh_OLDTVFilter_Noise, "t_texDirt");
	global._dirt_magnetude = shader_get_uniform(sh_OLDTVFilter_Noise, "f_magnetudeDirt");
	gpu_set_texrepeat_ext(global._noise_pattern, true);
	gpu_set_texrepeat_ext(global._static_pattern, true);
	gpu_set_texrepeat_ext(global._dirt_pattern, true);

	//  Composite Filter (NTSC)
	global._composite_count = 0.0;
	global._composite_width = shader_get_uniform(sh_OLDTVFilter_Composite, "f_screenWidth");
	global._composite_height = shader_get_uniform(sh_OLDTVFilter_Composite, "f_screenHeight");
	global._composite_distortion = shader_get_uniform(sh_OLDTVFilter_Composite, "f_distortion");
	global._composite_artifact = shader_get_uniform(sh_OLDTVFilter_Composite, "f_artifact");
	global._composite_fringing = shader_get_uniform(sh_OLDTVFilter_Composite, "f_fringing");
	global._composite_kernel = shader_get_uniform(sh_OLDTVFilter_Composite, "a_kernel");
	global._composite_kernel_flag = false;
	global._composite_kernel_positive[0] = -1.0; global._composite_kernel_positive[1] = 2.0; global._composite_kernel_positive[2] = -1.0; 
	global._composite_kernel_negative[0] = 1.0; global._composite_kernel_negative[1] = -2.0; global._composite_kernel_negative[2] = 1.0; 

	global._bleeding_width = shader_get_uniform(sh_OLDTVFilter_Bleeding, "f_screenWidth");
	global._bleeding_height = shader_get_uniform(sh_OLDTVFilter_Bleeding, "f_screenHeight");
	global._bleeding_bleeding = shader_get_uniform(sh_OLDTVFilter_Bleeding, "f_bleeding");

	//  Television Filter
	global._television_width = shader_get_uniform(sh_OLDTVFilter_Television, "f_screenWidth");
	global._television_brightness = shader_get_uniform(sh_OLDTVFilter_Television, "f_brightness");
	global._television_contrast = shader_get_uniform(sh_OLDTVFilter_Television, "f_contrast");
	global._television_saturation = shader_get_uniform(sh_OLDTVFilter_Television, "f_saturation");
	global._television_sharpness = shader_get_uniform(sh_OLDTVFilter_Television, "f_sharpness");

	//  Chromatic Aberration
	global._chromatic_pattern = shader_get_sampler_index(sh_OLDTVFilter_Chromatic, "t_texChromatic")
	global._chromatic_magnetude = shader_get_uniform(sh_OLDTVFilter_Chromatic, "f_magnetudeChromatic");
	gpu_set_texrepeat_ext(global._chromatic_pattern, true);

	//  Scanline Filter
	global._scanline_width = shader_get_uniform(sh_OLDTVFilter_Scanline, "f_screenWidth");
	global._scanline_height = shader_get_uniform(sh_OLDTVFilter_Scanline, "f_screenHeight");
	global._scanline_pattern = shader_get_sampler_index(sh_OLDTVFilter_Scanline, "t_texScanline")
	global._scanline_magnetude = shader_get_uniform(sh_OLDTVFilter_Scanline, "f_magnetude");
	gpu_set_texrepeat_ext(global._scanline_pattern, true);

	//  Tube Filter
	global._tube_mask = shader_get_sampler_index(sh_OLDTVFilter_Tube, "t_texMask")
	global._tube_distortion = shader_get_uniform(sh_OLDTVFilter_Tube, "f_magnetudeTube");

	surface_resize(application_surface, global.surface_width, global.surface_height);


}
